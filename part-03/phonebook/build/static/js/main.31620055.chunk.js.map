{"version":3,"sources":["components/Filter.js","components/Notification.js","services/persons.js","components/PersonForm.js","components/Persons.js","App.js","index.js"],"names":["Filter","nameFilter","setNameFilter","value","onChange","e","target","Notification","notification","message","type","className","baseUrl","personService","getAllPersons","axios","get","then","response","data","createPerson","newPerson","post","updatePerson","id","put","deletePerson","delete","PersonForm","name","setName","number","setNumber","handleSubmit","onSubmit","Persons","persons","onDeletePerson","map","person","Fragment","onClick","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","setNotification","sendNotification","setTimeout","useEffect","initialPersons","catch","error","console","log","personsToDisplay","filter","toLowerCase","includes","preventDefault","existingPerson","find","undefined","createdPerson","concat","window","confirm","updatedPerson","personToDelete","p","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.31620055.chunk.js","sourcesContent":["\r\nconst Filter = ({ nameFilter, setNameFilter }) => {\r\n    return (\r\n        <div>\r\n            filter shown with:\r\n            <input\r\n                value={nameFilter}\r\n                onChange={(e) => setNameFilter(e.target.value)} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Filter","const Notification = ({ notification }) => {\r\n  const { message, type } = notification\r\n\r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n  if (type === 'error') {\r\n    return (\r\n      <div className=\"error\">\r\n        {message}\r\n      </div>\r\n    )\r\n  } else if (type === 'info') {\r\n    return (\r\n      <div className=\"info\">\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Notification","import axios from \"axios\"\r\n//const baseUrl = 'http://localhost:3001/api/persons'\r\n//const baseUrl = 'http://fso-21-phonebook.herokuapp.com/api/persons'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAllPersons = () => {\r\n  return axios.get(baseUrl)\r\n    .then(response => response.data)\r\n}\r\n\r\nconst createPerson = newPerson => {\r\n  return axios.post(baseUrl, newPerson)\r\n    .then(response => response.data)\r\n}\r\n\r\nconst updatePerson = (id, newPerson) => {\r\n  return axios.put(`${baseUrl}/${id}`, newPerson)\r\n    .then(response => response.data)\r\n}\r\n\r\nconst deletePerson = (id) => {\r\n  return axios.delete(`${baseUrl}/${id}`)\r\n    .then(response => response.data)\r\n}\r\n\r\nconst personService = { getAllPersons, createPerson, updatePerson, deletePerson }\r\n\r\nexport default personService","\r\nconst PersonForm = (\r\n    {\r\n        name,\r\n        setName,\r\n        number,\r\n        setNumber,\r\n        handleSubmit\r\n    }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                name:\r\n                <input\r\n                    value={name}\r\n                    onChange={(e) => setName(e.target.value)} />\r\n            </div>\r\n            <div>\r\n                number :\r\n                <input\r\n                    value={number}\r\n                    onChange={(e) => setNumber(e.target.value)} />\r\n            </div>\r\n            <div>\r\n                <button type=\"submit\">add</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default PersonForm","import React from \"react\";\r\n\r\nexport const Persons = ({ persons, onDeletePerson }) => {\r\n  return (\r\n    persons.map(person => (\r\n      <React.Fragment key={person.id}>\r\n        <p>\r\n          {person.name} {person.number} &nbsp;\r\n          <button onClick={() => onDeletePerson(person)} >delete</button>\r\n        </p>\r\n      </React.Fragment>\r\n    ))\r\n  );\r\n};\r\n\r\nexport default Persons","import React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport Notification from './components/Notification'\nimport personService from './services/persons'\nimport PersonForm from './components/PersonForm'\nimport { Persons } from './components/Persons'\n\nconst App = () => {\n\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [nameFilter, setNameFilter] = useState('')\n  const [notification, setNotification] = useState({\n    message: null,\n    type: null\n  })\n\n  const sendNotification = (message, type) => {\n    setNotification({ message, type })\n    setTimeout(() => {\n      setNotification({ message: null, type: null })\n    }, 3000);\n  }\n\n  // Initialize persons from backend\n  useEffect(() => {\n    personService\n      .getAllPersons()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n      .catch(error => {\n        console.log('Populating persons failed: ', error)\n        sendNotification(`Failed to retrieve people from server: ${error.response.data.error}`, 'error')\n      })\n  }, [])\n\n  // Person Filtering\n  const personsToDisplay =\n    persons.filter(person =>\n      person.name\n        .toLowerCase()\n        .includes(nameFilter))\n\n  // Create (or) Update new Person\n  const addName = (e) => {\n    e.preventDefault()\n\n    const newPerson = {\n      name: newName,\n      number: newNumber\n    }\n\n    const existingPerson = persons.find(person => person.name === newName);\n\n    if (existingPerson === undefined) {\n      personService.createPerson(newPerson)\n        .then(createdPerson => {\n          setPersons(persons.concat(createdPerson))\n          sendNotification(`Added ${createdPerson.name}`, 'info')\n        })\n        .catch(error => {\n            console.log(`Server returned error: ${error}`);\n            console.log({error})\n            sendNotification(error.response.data.error, 'error')\n        })\n    } else {\n      const updateConfirmation =\n        window.confirm(`${newName} is already added to phonebook, replace the old number with a new one ?`)\n      if (updateConfirmation) {\n        personService.updatePerson(existingPerson.id, newPerson)\n          .then(updatedPerson => {\n            setPersons(persons.map(person => {\n              return person.id === existingPerson.id\n                ? updatedPerson\n                : person\n            }))\n            sendNotification(`Updated ${existingPerson.name}`, 'info')\n          })\n          .catch(error => {\n            console.log(`Server returned error: ${error}`);\n            //alert(`Server was unable to update ${existingPerson.name}. Please refresh to fetch latest information from the server.`)\n            sendNotification(`Server failed to update information for ${existingPerson.name}. Error: ${error.response.data.error}. Please refresh to proceed.`,\n              'error')\n          })\n      }\n    }\n\n    setNewName('')\n    setNewNumber('')\n  }\n\n  // Delete Person\n  const deletePerson = (personToDelete) => {\n    const confirmation = window.confirm(`Delete ${personToDelete.name} ?`)\n\n    if (confirmation) {\n      personService.deletePerson(personToDelete.id)\n        .then(() => {\n          setPersons(persons.filter(person => person.id !== personToDelete.id))\n        })\n        .catch(error => {\n          console.log(`Server returned error: ${error}`);\n          //alert(`The person ${personToDelete.name} was already deleted from server.`)\n          sendNotification(`Information for ${personToDelete.name} has been removed from the server.`,\n            'error')\n          setPersons(persons.filter(p => p.id !== personToDelete.id))\n        })\n    }\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification\n        notification={notification} />\n      <Filter nameFilter={nameFilter} setNameFilter={setNameFilter} />\n      <h2>Add a new</h2>\n      <PersonForm\n        name={newName}\n        setName={setNewName}\n        number={newNumber}\n        setNumber={setNewNumber}\n        handleSubmit={addName}\n      />\n      <h2>Numbers</h2>\n      <Persons persons={personsToDisplay} onDeletePerson={deletePerson} />\n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}